{"dependencies":[{"name":"/Users/ervinewell/Projects/hedge-editor/package.json","includedInParent":true,"mtime":1527090820000},{"name":"/Users/ervinewell/Projects/hedge-editor/node_modules/prosemirror-schema-list/package.json","includedInParent":true,"mtime":1521195615000},{"name":"prosemirror-transform","loc":{"line":5,"column":35}},{"name":"prosemirror-model","loc":{"line":6,"column":31}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar prosemirrorTransform = require('prosemirror-transform');\nvar prosemirrorModel = require('prosemirror-model');\n\nvar olDOM = [\"ol\", 0];\nvar ulDOM = [\"ul\", 0];\nvar liDOM = [\"li\", 0];\n\n// :: NodeSpec\n// An ordered list [node spec](#model.NodeSpec). Has a single\n// attribute, `order`, which determines the number at which the list\n// starts counting, and defaults to 1. Represented as an `<ol>`\n// element.\nvar orderedList = {\n  attrs: {order: {default: 1}},\n  parseDOM: [{tag: \"ol\", getAttrs: function getAttrs(dom) {\n    return {order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1}\n  }}],\n  toDOM: function toDOM(node) {\n    return node.attrs.order == 1 ? olDOM : [\"ol\", {start: node.attrs.order}, 0]\n  }\n};\n\n// :: NodeSpec\n// A bullet list node spec, represented in the DOM as `<ul>`.\nvar bulletList = {\n  parseDOM: [{tag: \"ul\"}],\n  toDOM: function toDOM() { return ulDOM }\n};\n\n// :: NodeSpec\n// A list item (`<li>`) spec.\nvar listItem = {\n  parseDOM: [{tag: \"li\"}],\n  toDOM: function toDOM() { return liDOM },\n  defining: true\n};\n\nfunction add(obj, props) {\n  var copy = {};\n  for (var prop in obj) { copy[prop] = obj[prop]; }\n  for (var prop$1 in props) { copy[prop$1] = props[prop$1]; }\n  return copy\n}\n\n// :: (OrderedMap<NodeSpec>, string, ?string) → OrderedMap<NodeSpec>\n// Convenience function for adding list-related node types to a map\n// specifying the nodes for a schema. Adds\n// [`orderedList`](#schema-list.orderedList) as `\"ordered_list\"`,\n// [`bulletList`](#schema-list.bulletList) as `\"bullet_list\"`, and\n// [`listItem`](#schema-list.listItem) as `\"list_item\"`.\n//\n// `itemContent` determines the content expression for the list items.\n// If you want the commands defined in this module to apply to your\n// list structure, it should have a shape like `\"paragraph block*\"` or\n// `\"paragraph (ordered_list | bullet_list)*\"`. `listGroup` can be\n// given to assign a group name to the list node types, for example\n// `\"block\"`.\nfunction addListNodes(nodes, itemContent, listGroup) {\n  return nodes.append({\n    ordered_list: add(orderedList, {content: \"list_item+\", group: listGroup}),\n    bullet_list: add(bulletList, {content: \"list_item+\", group: listGroup}),\n    list_item: add(listItem, {content: itemContent})\n  })\n}\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command function that wraps the selection in a list with\n// the given type an attributes. If `dispatch` is null, only return a\n// value to indicate whether this is possible, but don't actually\n// perform the change.\nfunction wrapInList(listType, attrs) {\n  return function(state, dispatch) {\n    var ref = state.selection;\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var range = $from.blockRange($to), doJoin = false, outerRange = range;\n    if (!range) { return false }\n    // This is at the top of an existing list item\n    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n      // Don't do anything if this is the top of the list\n      if ($from.index(range.depth - 1) == 0) { return false }\n      var $insert = state.doc.resolve(range.start - 2);\n      outerRange = new prosemirrorModel.NodeRange($insert, $insert, range.depth);\n      if (range.endIndex < range.parent.childCount)\n        { range = new prosemirrorModel.NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth); }\n      doJoin = true;\n    }\n    var wrap = prosemirrorTransform.findWrapping(outerRange, listType, attrs, range);\n    if (!wrap) { return false }\n    if (dispatch) { dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView()); }\n    return true\n  }\n}\n\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n  var content = prosemirrorModel.Fragment.empty;\n  for (var i = wrappers.length - 1; i >= 0; i--)\n    { content = prosemirrorModel.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content)); }\n\n  tr.step(new prosemirrorTransform.ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end,\n                                new prosemirrorModel.Slice(content, 0, 0), wrappers.length, true));\n\n  var found = 0;\n  for (var i$1 = 0; i$1 < wrappers.length; i$1++) { if (wrappers[i$1].type == listType) { found = i$1 + 1; } }\n  var splitDepth = wrappers.length - found;\n\n  var splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;\n  for (var i$2 = range.startIndex, e = range.endIndex, first = true; i$2 < e; i$2++, first = false) {\n    if (!first && prosemirrorTransform.canSplit(tr.doc, splitPos, splitDepth)) {\n      tr.split(splitPos, splitDepth);\n      splitPos += 2 * splitDepth;\n    }\n    splitPos += parent.child(i$2).nodeSize;\n  }\n  return tr\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Build a command that splits a non-empty textblock at the top level\n// of a list item by also splitting that list item.\nfunction splitListItem(itemType) {\n  return function(state, dispatch) {\n    var ref = state.selection;\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var node = ref.node;\n    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) { return false }\n    var grandParent = $from.node(-1);\n    if (grandParent.type != itemType) { return false }\n    if ($from.parent.content.size == 0) {\n      // In an empty block. If this is a nested list, the wrapping\n      // list item should be split. Otherwise, bail out and let next\n      // command handle lifting.\n      if ($from.depth == 2 || $from.node(-3).type != itemType ||\n          $from.index(-2) != $from.node(-2).childCount - 1) { return false }\n      if (dispatch) {\n        var wrap = prosemirrorModel.Fragment.empty, keepItem = $from.index(-1) > 0;\n        // Build a fragment containing empty versions of the structure\n        // from the outer list item to the parent node of the cursor\n        for (var d = $from.depth - (keepItem ? 1 : 2); d >= $from.depth - 3; d--)\n          { wrap = prosemirrorModel.Fragment.from($from.node(d).copy(wrap)); }\n        // Add a second list item with an empty default start node\n        wrap = wrap.append(prosemirrorModel.Fragment.from(itemType.createAndFill()));\n        var tr$1 = state.tr.replace($from.before(keepItem ? null : -1), $from.after(-3), new prosemirrorModel.Slice(wrap, keepItem ? 3 : 2, 2));\n        tr$1.setSelection(state.selection.constructor.near(tr$1.doc.resolve($from.pos + (keepItem ? 3 : 2))));\n        dispatch(tr$1.scrollIntoView());\n      }\n      return true\n    }\n    var nextType = $to.pos == $from.end() ? grandParent.defaultContentType(0) : null;\n    var tr = state.tr.delete($from.pos, $to.pos);\n    var types = nextType && [null, {type: nextType}];\n    if (!prosemirrorTransform.canSplit(tr.doc, $from.pos, 2, types)) { return false }\n    if (dispatch) { dispatch(tr.split($from.pos, 2, types).scrollIntoView()); }\n    return true\n  }\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command to lift the list item around the selection up into\n// a wrapping list.\nfunction liftListItem(itemType) {\n  return function(state, dispatch) {\n    var ref = state.selection;\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var range = $from.blockRange($to, function (node) { return node.childCount && node.firstChild.type == itemType; });\n    if (!range) { return false }\n    if (!dispatch) { return true }\n    if ($from.node(range.depth - 1).type == itemType) // Inside a parent list\n      { return liftToOuterList(state, dispatch, itemType, range) }\n    else // Outer list node\n      { return liftOutOfList(state, dispatch, range) }\n  }\n}\n\nfunction liftToOuterList(state, dispatch, itemType, range) {\n  var tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);\n  if (end < endOfList) {\n    // There are siblings after the lifted items, which must become\n    // children of the last item\n    tr.step(new prosemirrorTransform.ReplaceAroundStep(end - 1, endOfList, end, endOfList,\n                                  new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));\n    range = new prosemirrorModel.NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);\n  }\n  dispatch(tr.lift(range, prosemirrorTransform.liftTarget(range)).scrollIntoView());\n  return true\n}\n\nfunction liftOutOfList(state, dispatch, range) {\n  var tr = state.tr, list = range.parent;\n  // Merge the list items into a single big item\n  for (var pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n    pos -= list.child(i).nodeSize;\n    tr.delete(pos - 1, pos + 1);\n  }\n  var $start = tr.doc.resolve(range.start), item = $start.nodeAfter;\n  var atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;\n  var parent = $start.node(-1), indexBefore = $start.index(-1);\n  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1,\n                         item.content.append(atEnd ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list))))\n    { return false }\n  var start = $start.pos, end = start + item.nodeSize;\n  // Strip off the surrounding list. At the sides where we're not at\n  // the end of the list, the existing list is closed. At sides where\n  // this is the end, it is overwritten to its end.\n  tr.step(new prosemirrorTransform.ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1,\n                                new prosemirrorModel.Slice((atStart ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list.copy(prosemirrorModel.Fragment.empty)))\n                                          .append(atEnd ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list.copy(prosemirrorModel.Fragment.empty))),\n                                          atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));\n  dispatch(tr.scrollIntoView());\n  return true\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command to sink the list item around the selection down\n// into an inner list.\nfunction sinkListItem(itemType) {\n  return function(state, dispatch) {\n    var ref = state.selection;\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var range = $from.blockRange($to, function (node) { return node.childCount && node.firstChild.type == itemType; });\n    if (!range) { return false }\n    var startIndex = range.startIndex;\n    if (startIndex == 0) { return false }\n    var parent = range.parent, nodeBefore = parent.child(startIndex - 1);\n    if (nodeBefore.type != itemType) { return false }\n\n    if (dispatch) {\n      var nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;\n      var inner = prosemirrorModel.Fragment.from(nestedBefore ? itemType.create() : null);\n      var slice = new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(itemType.create(null, prosemirrorModel.Fragment.from(parent.copy(inner)))),\n                            nestedBefore ? 3 : 1, 0);\n      var before = range.start, after = range.end;\n      dispatch(state.tr.step(new prosemirrorTransform.ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after,\n                                                   before, after, slice, 1, true))\n               .scrollIntoView());\n    }\n    return true\n  }\n}\n\nexports.orderedList = orderedList;\nexports.bulletList = bulletList;\nexports.listItem = listItem;\nexports.addListNodes = addListNodes;\nexports.wrapInList = wrapInList;\nexports.splitListItem = splitListItem;\nexports.liftListItem = liftListItem;\nexports.sinkListItem = sinkListItem;\n//# sourceMappingURL=schema-list.js.map\n","map":{"mappings":[{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/prosemirror-schema-list/dist/schema-list.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}}],"sources":{"node_modules/prosemirror-schema-list/dist/schema-list.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar prosemirrorTransform = require('prosemirror-transform');\nvar prosemirrorModel = require('prosemirror-model');\n\nvar olDOM = [\"ol\", 0];\nvar ulDOM = [\"ul\", 0];\nvar liDOM = [\"li\", 0];\n\n// :: NodeSpec\n// An ordered list [node spec](#model.NodeSpec). Has a single\n// attribute, `order`, which determines the number at which the list\n// starts counting, and defaults to 1. Represented as an `<ol>`\n// element.\nvar orderedList = {\n  attrs: {order: {default: 1}},\n  parseDOM: [{tag: \"ol\", getAttrs: function getAttrs(dom) {\n    return {order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1}\n  }}],\n  toDOM: function toDOM(node) {\n    return node.attrs.order == 1 ? olDOM : [\"ol\", {start: node.attrs.order}, 0]\n  }\n};\n\n// :: NodeSpec\n// A bullet list node spec, represented in the DOM as `<ul>`.\nvar bulletList = {\n  parseDOM: [{tag: \"ul\"}],\n  toDOM: function toDOM() { return ulDOM }\n};\n\n// :: NodeSpec\n// A list item (`<li>`) spec.\nvar listItem = {\n  parseDOM: [{tag: \"li\"}],\n  toDOM: function toDOM() { return liDOM },\n  defining: true\n};\n\nfunction add(obj, props) {\n  var copy = {};\n  for (var prop in obj) { copy[prop] = obj[prop]; }\n  for (var prop$1 in props) { copy[prop$1] = props[prop$1]; }\n  return copy\n}\n\n// :: (OrderedMap<NodeSpec>, string, ?string) → OrderedMap<NodeSpec>\n// Convenience function for adding list-related node types to a map\n// specifying the nodes for a schema. Adds\n// [`orderedList`](#schema-list.orderedList) as `\"ordered_list\"`,\n// [`bulletList`](#schema-list.bulletList) as `\"bullet_list\"`, and\n// [`listItem`](#schema-list.listItem) as `\"list_item\"`.\n//\n// `itemContent` determines the content expression for the list items.\n// If you want the commands defined in this module to apply to your\n// list structure, it should have a shape like `\"paragraph block*\"` or\n// `\"paragraph (ordered_list | bullet_list)*\"`. `listGroup` can be\n// given to assign a group name to the list node types, for example\n// `\"block\"`.\nfunction addListNodes(nodes, itemContent, listGroup) {\n  return nodes.append({\n    ordered_list: add(orderedList, {content: \"list_item+\", group: listGroup}),\n    bullet_list: add(bulletList, {content: \"list_item+\", group: listGroup}),\n    list_item: add(listItem, {content: itemContent})\n  })\n}\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command function that wraps the selection in a list with\n// the given type an attributes. If `dispatch` is null, only return a\n// value to indicate whether this is possible, but don't actually\n// perform the change.\nfunction wrapInList(listType, attrs) {\n  return function(state, dispatch) {\n    var ref = state.selection;\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var range = $from.blockRange($to), doJoin = false, outerRange = range;\n    if (!range) { return false }\n    // This is at the top of an existing list item\n    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n      // Don't do anything if this is the top of the list\n      if ($from.index(range.depth - 1) == 0) { return false }\n      var $insert = state.doc.resolve(range.start - 2);\n      outerRange = new prosemirrorModel.NodeRange($insert, $insert, range.depth);\n      if (range.endIndex < range.parent.childCount)\n        { range = new prosemirrorModel.NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth); }\n      doJoin = true;\n    }\n    var wrap = prosemirrorTransform.findWrapping(outerRange, listType, attrs, range);\n    if (!wrap) { return false }\n    if (dispatch) { dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView()); }\n    return true\n  }\n}\n\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n  var content = prosemirrorModel.Fragment.empty;\n  for (var i = wrappers.length - 1; i >= 0; i--)\n    { content = prosemirrorModel.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content)); }\n\n  tr.step(new prosemirrorTransform.ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end,\n                                new prosemirrorModel.Slice(content, 0, 0), wrappers.length, true));\n\n  var found = 0;\n  for (var i$1 = 0; i$1 < wrappers.length; i$1++) { if (wrappers[i$1].type == listType) { found = i$1 + 1; } }\n  var splitDepth = wrappers.length - found;\n\n  var splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;\n  for (var i$2 = range.startIndex, e = range.endIndex, first = true; i$2 < e; i$2++, first = false) {\n    if (!first && prosemirrorTransform.canSplit(tr.doc, splitPos, splitDepth)) {\n      tr.split(splitPos, splitDepth);\n      splitPos += 2 * splitDepth;\n    }\n    splitPos += parent.child(i$2).nodeSize;\n  }\n  return tr\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Build a command that splits a non-empty textblock at the top level\n// of a list item by also splitting that list item.\nfunction splitListItem(itemType) {\n  return function(state, dispatch) {\n    var ref = state.selection;\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var node = ref.node;\n    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) { return false }\n    var grandParent = $from.node(-1);\n    if (grandParent.type != itemType) { return false }\n    if ($from.parent.content.size == 0) {\n      // In an empty block. If this is a nested list, the wrapping\n      // list item should be split. Otherwise, bail out and let next\n      // command handle lifting.\n      if ($from.depth == 2 || $from.node(-3).type != itemType ||\n          $from.index(-2) != $from.node(-2).childCount - 1) { return false }\n      if (dispatch) {\n        var wrap = prosemirrorModel.Fragment.empty, keepItem = $from.index(-1) > 0;\n        // Build a fragment containing empty versions of the structure\n        // from the outer list item to the parent node of the cursor\n        for (var d = $from.depth - (keepItem ? 1 : 2); d >= $from.depth - 3; d--)\n          { wrap = prosemirrorModel.Fragment.from($from.node(d).copy(wrap)); }\n        // Add a second list item with an empty default start node\n        wrap = wrap.append(prosemirrorModel.Fragment.from(itemType.createAndFill()));\n        var tr$1 = state.tr.replace($from.before(keepItem ? null : -1), $from.after(-3), new prosemirrorModel.Slice(wrap, keepItem ? 3 : 2, 2));\n        tr$1.setSelection(state.selection.constructor.near(tr$1.doc.resolve($from.pos + (keepItem ? 3 : 2))));\n        dispatch(tr$1.scrollIntoView());\n      }\n      return true\n    }\n    var nextType = $to.pos == $from.end() ? grandParent.defaultContentType(0) : null;\n    var tr = state.tr.delete($from.pos, $to.pos);\n    var types = nextType && [null, {type: nextType}];\n    if (!prosemirrorTransform.canSplit(tr.doc, $from.pos, 2, types)) { return false }\n    if (dispatch) { dispatch(tr.split($from.pos, 2, types).scrollIntoView()); }\n    return true\n  }\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command to lift the list item around the selection up into\n// a wrapping list.\nfunction liftListItem(itemType) {\n  return function(state, dispatch) {\n    var ref = state.selection;\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var range = $from.blockRange($to, function (node) { return node.childCount && node.firstChild.type == itemType; });\n    if (!range) { return false }\n    if (!dispatch) { return true }\n    if ($from.node(range.depth - 1).type == itemType) // Inside a parent list\n      { return liftToOuterList(state, dispatch, itemType, range) }\n    else // Outer list node\n      { return liftOutOfList(state, dispatch, range) }\n  }\n}\n\nfunction liftToOuterList(state, dispatch, itemType, range) {\n  var tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);\n  if (end < endOfList) {\n    // There are siblings after the lifted items, which must become\n    // children of the last item\n    tr.step(new prosemirrorTransform.ReplaceAroundStep(end - 1, endOfList, end, endOfList,\n                                  new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));\n    range = new prosemirrorModel.NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);\n  }\n  dispatch(tr.lift(range, prosemirrorTransform.liftTarget(range)).scrollIntoView());\n  return true\n}\n\nfunction liftOutOfList(state, dispatch, range) {\n  var tr = state.tr, list = range.parent;\n  // Merge the list items into a single big item\n  for (var pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n    pos -= list.child(i).nodeSize;\n    tr.delete(pos - 1, pos + 1);\n  }\n  var $start = tr.doc.resolve(range.start), item = $start.nodeAfter;\n  var atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;\n  var parent = $start.node(-1), indexBefore = $start.index(-1);\n  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1,\n                         item.content.append(atEnd ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list))))\n    { return false }\n  var start = $start.pos, end = start + item.nodeSize;\n  // Strip off the surrounding list. At the sides where we're not at\n  // the end of the list, the existing list is closed. At sides where\n  // this is the end, it is overwritten to its end.\n  tr.step(new prosemirrorTransform.ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1,\n                                new prosemirrorModel.Slice((atStart ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list.copy(prosemirrorModel.Fragment.empty)))\n                                          .append(atEnd ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list.copy(prosemirrorModel.Fragment.empty))),\n                                          atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));\n  dispatch(tr.scrollIntoView());\n  return true\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command to sink the list item around the selection down\n// into an inner list.\nfunction sinkListItem(itemType) {\n  return function(state, dispatch) {\n    var ref = state.selection;\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var range = $from.blockRange($to, function (node) { return node.childCount && node.firstChild.type == itemType; });\n    if (!range) { return false }\n    var startIndex = range.startIndex;\n    if (startIndex == 0) { return false }\n    var parent = range.parent, nodeBefore = parent.child(startIndex - 1);\n    if (nodeBefore.type != itemType) { return false }\n\n    if (dispatch) {\n      var nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;\n      var inner = prosemirrorModel.Fragment.from(nestedBefore ? itemType.create() : null);\n      var slice = new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(itemType.create(null, prosemirrorModel.Fragment.from(parent.copy(inner)))),\n                            nestedBefore ? 3 : 1, 0);\n      var before = range.start, after = range.end;\n      dispatch(state.tr.step(new prosemirrorTransform.ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after,\n                                                   before, after, slice, 1, true))\n               .scrollIntoView());\n    }\n    return true\n  }\n}\n\nexports.orderedList = orderedList;\nexports.bulletList = bulletList;\nexports.listItem = listItem;\nexports.addListNodes = addListNodes;\nexports.wrapInList = wrapInList;\nexports.splitListItem = splitListItem;\nexports.liftListItem = liftListItem;\nexports.sinkListItem = sinkListItem;\n//# sourceMappingURL=schema-list.js.map\n"},"lineCount":257}},"hash":"b6b79474377261d9d497746ea0dde034","cacheData":{"env":{}}}